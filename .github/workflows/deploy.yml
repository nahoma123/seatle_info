# .github/workflows/deploy.yml

name: Build and Deploy to EC2 via GHCR

on:
  push:
    branches:
      - main

# This is correct: Define IMAGE_NAME globally for all jobs.
env:
  IMAGE_NAME: ghcr.io/nahoma123/seatle_info

jobs:
  build-and-push-image:
    name: Build Docker image and push to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # All steps from your original build job are here and correct.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    name: Deploy to EC2 instance
    runs-on: ubuntu-latest
    needs: build-and-push-image
    environment: SERVER_HOST

    # This 'env' block remains correct.
    env:
      PROD_DB_USER: ${{ secrets.DB_USER }}
      PROD_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      PROD_DB_NAME: ${{ secrets.DB_NAME }}
      PROD_FIREBASE_JSON: ${{ secrets.FIREBASE_ADMIN_SDK_JSON }}
      GITHUB_LOGIN_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
      IMAGE_NAME: ghcr.io/nahoma123/seatle_info

    steps:
      - name: Deploy to Server via SSH
        # This is now a single, unified step.
        run: |
          # Prepare the SSH key locally on the runner
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SERVER_HOST" >> ~/.ssh/known_hosts

          # THE FIX: We pass the variables directly on the SSH command line.
          # The single quotes around the values (e.g., '$PROD_DB_USER') are a
          # security best practice to handle special characters in secrets.
          ssh -i ~/.ssh/id_rsa $SERVER_USER@$SERVER_HOST \
            "PROD_DB_USER='$PROD_DB_USER' \
             PROD_DB_PASSWORD='$PROD_DB_PASSWORD' \
             PROD_DB_NAME='$PROD_DB_NAME' \
             PROD_FIREBASE_JSON='$PROD_FIREBASE_JSON' \
             GITHUB_LOGIN_TOKEN='$GITHUB_LOGIN_TOKEN' \
             IMAGE_NAME='$IMAGE_NAME' \
             GITHUB_ACTOR='${{ github.actor }}' \
             bash -s" << 'EOF'
            # --- Everything below this line runs on your EC2 server ---
            set -e

            echo "Navigating to project directory..."
            cd ~/seatle_info

            echo "Ensuring config directory exists..."
            mkdir -p ./config

            echo "Placing Firebase key file..."
            echo "$PROD_FIREBASE_JSON" > ./config/firebase-key.json

            echo "Creating production .env file..."
            > ./.env
            echo "DB_USER=$PROD_DB_USER" >> ./.env
            echo "DB_PASSWORD=$PROD_DB_PASSWORD" >> ./.env
            echo "DB_NAME=$PROD_DB_NAME" >> ./.env
            echo "DB_HOST=postgres_db" >> ./.env
            echo "DB_SSL_MODE=disable" >> ./.env
            echo "GIN_MODE=release" >> ./.env
            echo "SERVER_PORT=8080" >> ./.env
            echo "FIREBASE_SERVICE_ACCOUNT_KEY_PATH=/app/secret/firebase-key.json" >> ./.env
            echo "IMAGE_NAME=$IMAGE_NAME" >> ./.env

            echo "Verifying .env file..."
            cat ./.env

            echo "Logging into GHCR..."
            echo "$GITHUB_LOGIN_TOKEN" | sudo docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin

            echo "Pulling latest Docker images..."
            sudo docker compose pull

            echo "Starting services with new configuration..."
            sudo docker compose up -d --force-recreate

            echo "Running database migrations..."
            sudo docker compose run --rm migrate

            echo "Pruning old Docker images..."
            sudo docker image prune -af

            echo "Deployment successful!"
          EOF
