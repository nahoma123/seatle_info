# .github/workflows/ci.yml

name: Build and Deploy to EC2 via GHCR

on:
  push:
    branches:
      - main

env:
  # This global variable is available to all jobs.
  IMAGE_NAME: ghcr.io/nahoma123/seatle_info

jobs:
  build-and-push-image:
    name: Build Docker image and push to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    name: Deploy to EC2 instance
    runs-on: ubuntu-latest
    needs: build-and-push-image
    environment: SERVER_HOST

    env:
      SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      FIREBASE_ADMIN_SDK_JSON: ${{ secrets.FIREBASE_ADMIN_SDK_JSON }}
      FIREBASE_KEY_PATH_ON_SERVER: ${{ secrets.FIREBASE_KEY_PATH_ON_SERVER }}
      DB_SOURCE: ${{ secrets.DB_SOURCE }}
      GHCR_USER: ${{ github.actor }}
      GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Set up SSH key and known_hosts
        run: |
          # THE FIX: Trim whitespace/invisible chars from the host variable
          SANITIZED_HOST=$(echo "$SERVER_HOST" | xargs)

          echo "Original Host Value: [${SERVER_HOST}]"
          echo "Sanitized Host Value: [${SANITIZED_HOST}]"

          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Use the sanitized variable
          ssh-keyscan -H "$SANITIZED_HOST" >> ~/.ssh/known_hosts

      - name: Copy Firebase key to server
        run: |
          # THE FIX: Trim whitespace/invisible chars from the host variable
          SANITIZED_HOST=$(echo "$SERVER_HOST" | xargs)

          echo "$FIREBASE_ADMIN_SDK_JSON" > ./firebase-key-to-copy.json
          # Use the sanitized variable
          scp -i ~/.ssh/id_rsa ./firebase-key-to-copy.json ${SERVER_USER}@${SANITIZED_HOST}:${FIREBASE_KEY_PATH_ON_SERVER}
          rm ./firebase-key-to-copy.json

      - name: SSH, Migrate, and Deploy on Server
        run: |
          # THE FIX: Trim whitespace/invisible chars from the host variable
          SANITIZED_HOST=$(echo "$SERVER_HOST" | xargs)

          # Use the sanitized variable
          ssh -i ~/.ssh/id_rsa ${SERVER_USER}@${SANITIZED_HOST} "
            export GHCR_USER='${GHCR_USER}'
            export GHCR_TOKEN='${GHCR_TOKEN}'
            export IMAGE_NAME='${IMAGE_NAME}'
            export DB_SOURCE='${DB_SOURCE}'
            bash -s
          " << 'EOF'
            set -e
            cd ~/seatle_info
            echo "Logging into GHCR..."
            echo "$GHCR_TOKEN" | sudo docker login ghcr.io -u "$GHCR_USER" --password-stdin
            echo "Pulling latest image from GHCR..."
            sudo docker pull ${IMAGE_NAME}:latest
            echo "Running database migrations..."
            sudo docker-compose -f docker-compose.yml run --rm migrate migrate -path /migrations -database "$DB_SOURCE" up
            echo "Starting services with docker-compose..."
            sudo docker-compose -f docker-compose.yml up -d
            echo "Pruning old Docker images..."
            sudo docker image prune -af
          EOF
