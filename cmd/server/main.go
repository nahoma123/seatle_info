// File: cmd/server/main.go
package main

import (
	"context"
	"log" // Standard log for critical startup/shutdown messages before/after zap is active
	"os"
	"os/signal"
	"syscall"

	"seattle_info_backend/internal/config"
	// Zap is not directly used here anymore, logger comes from server or cleanup
)

func main() {
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("FATAL: Failed to load configuration: %v", err)
	}

	// initializeServer is generated by Wire and is in wire_gen.go.
	// It now sets up everything: DB, logger, services, handlers, jobs, and the server itself.
	server, cleanup, err := initializeServer(cfg)
	if err != nil {
		log.Fatalf("FATAL: Failed to initialize server: %v", err)
	}
	// Defer the cleanup function from Wire, which handles DB closing, logger syncing.
	// Server.Shutdown (called below) handles job stopping.
	defer cleanup()

	// Start the server in a new goroutine. Server.Start() also starts jobs.
	go func() {
		if err := server.Start(); err != nil && err.Error() != "http: Server closed" {
			log.Fatalf("FATAL: Server failed to start or crashed: %v", err)
		}
	}()

	// Wait for an interrupt signal to gracefully shut down the server.
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	sig := <-quit
	log.Printf("INFO: Received signal '%s'. Shutting down server...", sig)

	// Create a context with a timeout for the shutdown.
	shutdownCtx, cancelShutdown := context.WithTimeout(context.Background(), cfg.ServerTimeout)
	defer cancelShutdown()

	// Attempt to gracefully shut down the server (which includes stopping jobs).
	if err := server.Shutdown(shutdownCtx); err != nil {
		log.Printf("ERROR: Server forced to shutdown due to error: %v", err)
	} else {
		log.Println("INFO: Server shutdown complete.")
	}

	log.Println("INFO: Application exiting.")
}
