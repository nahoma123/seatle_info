// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go.uber.org/zap"
	"gorm.io/gorm"
	"log"
	"seattle_info_backend/internal/app"
	"seattle_info_backend/internal/auth"
	"seattle_info_backend/internal/category"
	"seattle_info_backend/internal/config"
	"seattle_info_backend/internal/filestorage"
	"seattle_info_backend/internal/firebase"
	"seattle_info_backend/internal/jobs"
	"seattle_info_backend/internal/listing"
	"seattle_info_backend/internal/notification"
	"seattle_info_backend/internal/platform/database"
	"seattle_info_backend/internal/platform/logger"
	"seattle_info_backend/internal/user"
	"time"
)

// Injectors from wire.go:

// initializeServer is the main Wire injector.
func initializeServer(cfg *config.Config) (*app.Server, func(), error) {
	zapLogger, err := logger.New(cfg)
	if err != nil {
		return nil, nil, err
	}
	db, err := database.NewGORM(cfg)
	if err != nil {
		return nil, nil, err
	}
	repository := user.NewGORMRepository(db)
	serviceImplementation := user.NewService(repository, cfg, zapLogger)
	inMemoryBlocklistConfig := provideInMemoryBlocklistConfig()
	inMemoryBlocklistService := auth.NewInMemoryBlocklistService(inMemoryBlocklistConfig)
	firebaseService, err := firebase.NewFirebaseService(cfg, zapLogger)
	if err != nil {
		return nil, nil, err
	}
	handler := user.NewHandler(serviceImplementation, zapLogger, inMemoryBlocklistService, firebaseService)
	authHandler := auth.NewHandler(serviceImplementation, zapLogger)
	categoryRepository := category.NewGORMRepository(db)
	service := category.NewService(categoryRepository, zapLogger, cfg)
	categoryHandler := category.NewHandler(service, zapLogger)
	listingRepository := listing.NewGORMRepository(db)
	notificationRepository := notification.NewGORMRepository(db)
	notificationService := notification.NewService(notificationRepository, zapLogger)
	string2 := provideImageStoragePath(cfg)
	fileStorageService, err := filestorage.NewFileStorageService(string2, zapLogger)
	if err != nil {
		return nil, nil, err
	}
	listingService := listing.NewService(listingRepository, repository, service, notificationService, fileStorageService, cfg, zapLogger)
	listingHandler := listing.NewHandler(listingService, zapLogger, cfg)
	notificationHandler := notification.NewHandler(notificationService, zapLogger)
	listingExpiryJob := jobs.NewListingExpiryJob(listingService, zapLogger, cfg)
	server, err := app.NewServer(cfg, zapLogger, handler, authHandler, categoryHandler, listingHandler, notificationHandler, listingExpiryJob, db, firebaseService, serviceImplementation, inMemoryBlocklistService)
	if err != nil {
		return nil, nil, err
	}
	return server, func() {
	}, nil
}

// wire.go:

func provideImageStoragePath(cfg *config.Config) string {
	return cfg.ImageStoragePath
}

func provideInMemoryBlocklistConfig() auth.InMemoryBlocklistConfig {
	return auth.InMemoryBlocklistConfig{
		DefaultExpiration: 24 * time.Hour,
		CleanupInterval:   1 * time.Hour,
	}
}

func provideCleanup(logger2 *zap.Logger, db *gorm.DB) func() {
	return func() {
		logger2.
			Info("Executing cleanup tasks...")
		database.CloseGORMDB(db)
		if err := logger2.Sync(); err != nil {
			log.Printf("ERROR: Failed to sync logger during cleanup: %v", err)
		}
		log.Println("Cleanup finished.")
	}
}
