// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go.uber.org/zap"
	"gorm.io/gorm"
	"log"
	"seattle_info_backend/internal/app"
	"seattle_info_backend/internal/auth"
	"seattle_info_backend/internal/category"
	"seattle_info_backend/internal/config"
	"seattle_info_backend/internal/jobs"
	"seattle_info_backend/internal/listing"
	"seattle_info_backend/internal/platform/database"
	"seattle_info_backend/internal/platform/logger"
	"seattle_info_backend/internal/user"
)

// Injectors from wire.go:

// initializeServer is the main Wire injector.
func initializeServer(cfg *config.Config) (*app.Server, func(), error) {
	zapLogger, err := logger.New(cfg)
	if err != nil {
		return nil, nil, err
	}
	jwtService := auth.NewJWTService(cfg, zapLogger)
	db, err := database.NewGORM(cfg)
	if err != nil {
		return nil, nil, err
	}
	repository := user.NewGORMRepository(db)
	serviceImplementation := user.NewService(repository, jwtService, cfg, zapLogger)
	handler := user.NewHandler(serviceImplementation, zapLogger)
	oAuthService := auth.NewOAuthService(cfg, serviceImplementation, jwtService, zapLogger)
	authHandler := auth.NewHandler(serviceImplementation, jwtService, oAuthService, zapLogger)
	categoryRepository := category.NewGORMRepository(db)
	service := category.NewService(categoryRepository, zapLogger, cfg)
	categoryHandler := category.NewHandler(service, zapLogger)
	listingRepository := listing.NewGORMRepository(db)
	listingService := listing.NewService(listingRepository, repository, service, cfg, zapLogger)
	listingHandler := listing.NewHandler(listingService, zapLogger)
	listingExpiryJob := jobs.NewListingExpiryJob(listingService, zapLogger, cfg)
	server, err := app.NewServer(cfg, zapLogger, jwtService, handler, authHandler, categoryHandler, listingHandler, listingExpiryJob)
	if err != nil {
		return nil, nil, err
	}
	return server, func() {
	}, nil
}

// wire.go:

func provideCleanup(logger2 *zap.Logger, db *gorm.DB) func() {
	return func() {
		logger2.
			Info("Executing cleanup tasks...")
		database.CloseGORMDB(db)
		if err := logger2.Sync(); err != nil {
			log.Printf("ERROR: Failed to sync logger during cleanup: %v", err)
		}
		log.Println("Cleanup finished.")
	}
}
