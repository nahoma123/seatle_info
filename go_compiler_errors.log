./cmd/server/wire.go
general error output (may not be compiler error):
runtime.main_main·f: function main is undeclared in the main package

./cmd/server/main.go
error 1:
undefined: initializeServer
	server, cleanup, err := initializeServer(cfg)


./cmd/server/wire_gen.go
general error output (may not be compiler error):
runtime.main_main·f: function main is undeclared in the main package

./internal/auth/handler.go
error 1:
undefined: OAuthService
	oauthService OAuthService // Interface type

error 2:
undefined: OAuthService
	oauthService OAuthService,

error 3:
undefined: LoginRequest
	var req LoginRequest

error 4:
undefined: RefreshTokenRequest
	var req RefreshTokenRequest


./internal/auth/oauth_service.go
error 1:
undefined: OAuthUserProvider
	oauthUserProvider OAuthUserProvider      // This is auth.OAuthUserProvider

error 2:
undefined: OAuthUserProvider
	oauthUserProvider OAuthUserProvider, // This is auth.OAuthUserProvider

error 3:
undefined: generateAndSetOAuthState
	state, err := generateAndSetOAuthState(c, s.cfg)

error 4:
undefined: getGoogleOAuthConfig
	googleCfg := getGoogleOAuthConfig(s.cfg)

error 5:
undefined: getOAuthCookie
	storedState, err := getOAuthCookie(c, s.cfg, s.cfg.OAuthStateCookieName)

error 6:
undefined: getGoogleOAuthConfig
	googleCfg := getGoogleOAuthConfig(s.cfg)

error 7:
undefined: googleUserInfoURL
	userInfoResp, err := client.Get(googleUserInfoURL)

error 8:
undefined: generateAndSetOAuthState
	state, err := generateAndSetOAuthState(c, s.cfg)

error 9:
undefined: generateAndSetOAuthNonce
	nonce, err := generateAndSetOAuthNonce(c, s.cfg)

error 10:
undefined: appleAuthURL
	authURL := appleAuthURL + "?" + params.Encode()

error 11:
undefined: getOAuthCookie
	storedState, err := getOAuthCookie(c, s.cfg, s.cfg.OAuthStateCookieName)

error 12:
undefined: getOAuthCookie
	storedNonce, err := getOAuthCookie(c, s.cfg, s.cfg.OAuthNonceCookieName)

error 13:
undefined: verifyAppleIDToken
	appleClaims, err := verifyAppleIDToken(idTokenStr, s.cfg.AppleClientID, storedNonce)

error 14:
undefined: AppleUserForm
		var appleUserFormData AppleUserForm

error 15:
undefined: getGoogleOAuthConfig
        return getGoogleOAuthConfig(s.cfg), nil


./internal/user/service.go
error 1:
undefined: Repository
	repo         Repository        // This is user.Repository (defined in user/repository.go)

error 2:
undefined: Repository
	repo Repository, // Expects user.Repository interface

error 3:
undefined: CreateRequestToDB
	dbUser := CreateRequestToDB(&req, hashedPassword) // user.CreateRequestToDB

error 4:
undefined: DBToShared
	sharedUser := DBToShared(dbUser) // user.DBToShared

error 5:
undefined: DBToShared
	sharedUser := DBToShared(dbUser) // user.DBToShared

error 6:
undefined: DBToShared
	sharedUser := DBToShared(dbUser) // user.DBToShared

error 7:
undefined: DBToShared
	sharedUser := DBToShared(dbUser) // user.DBToShared

error 8:
undefined: UpdateRequestFromProfileToDB
		UpdateRequestFromProfileToDB(&profile, dbUser) // This updates dbUser in place

error 9:
undefined: DBToShared
		return DBToShared(dbUser), false, nil // Convert GORM user to shared.User for return

error 10:
undefined: UpdateRequestFromProfileToDB
			UpdateRequestFromProfileToDB(&profile, dbUserByEmail) // Updates dbUserByEmail in place

error 11:
undefined: DBToShared
			return DBToShared(dbUserByEmail), false, nil // Convert GORM user to shared.User

error 12:
undefined: User
	dbNewUser := &User{ // This is user.User (GORM model)

error 13:
undefined: DBToShared
	return DBToShared(dbNewUser), true, nil // Convert GORM user to shared.User


./internal/user/handler.go
error 1:
undefined: ToUserResponse
	response := gin.H{"user": ToUserResponse(usr), "token": tokenResponse}

error 2:
undefined: ToUserResponse
	common.RespondOK(c, "User profile retrieved successfully.", ToUserResponse(usr))

error 3:
undefined: ToUserResponse
	common.RespondOK(c, "User retrieved successfully.", ToUserResponse(usr))


./internal/user/repository.go
error 1:
undefined: User
	Create(ctx context.Context, user *User) error

error 2:
undefined: User
	FindByEmail(ctx context.Context, email string) (*User, error)

error 3:
undefined: User
	FindByID(ctx context.Context, id uuid.UUID) (*User, error)

error 4:
undefined: User
	Update(ctx context.Context, user *User) error

error 5:
undefined: User
	FindByProvider(ctx context.Context, authProvider string, providerID string) (*User, error)

error 6:
undefined: User
func (r *gormRepository) Create(ctx context.Context, user *User) error {

error 7:
undefined: User
func (r *gormRepository) FindByEmail(ctx context.Context, email string) (*User, error) {

error 8:
undefined: User
	var userModel User // Use a different variable name if 'user' is a parameter elsewhere causing shadow

error 9:
undefined: User
func (r *gormRepository) FindByID(ctx context.Context, id uuid.UUID) (*User, error) {

error 10:
undefined: User
	var userModel User

error 11:
undefined: User
func (r *gormRepository) Update(ctx context.Context, user *User) error {

error 12:
undefined: User
func (r *gormRepository) FindByProvider(ctx context.Context, authProvider string, providerID string) (*User, error) {

error 13:
undefined: User
	var userModel User


./internal/user/adapter.go
error 1:
undefined: User
func DBToShared(dbUser *User) *shared.User {

error 2:
undefined: User
func CreateRequestToDB(req *shared.CreateUserRequest, hashedPassword string) *User {

error 3:
undefined: User
	return &User{

error 4:
undefined: User
func UpdateRequestFromProfileToDB(profile *shared.OAuthUserProfile, dbUser *User) {

error 5:
undefined: User
func UpdateRequestFromSharedToDB(svUser *shared.User, dbUser *User) {


./internal/category/service.go
error 1:
undefined: AdminCreateCategoryRequest
	AdminCreateCategory(ctx context.Context, req AdminCreateCategoryRequest) (*Category, error)

error 2:
undefined: Category
	AdminCreateCategory(ctx context.Context, req AdminCreateCategoryRequest) (*Category, error)

error 3:
undefined: AdminCreateSubCategoryRequest
	AdminCreateSubCategory(ctx context.Context, categoryID uuid.UUID, req AdminCreateSubCategoryRequest) (*SubCategory, error)

error 4:
undefined: SubCategory
	AdminCreateSubCategory(ctx context.Context, categoryID uuid.UUID, req AdminCreateSubCategoryRequest) (*SubCategory, error)

error 5:
undefined: AdminCreateCategoryRequest
	AdminUpdateCategory(ctx context.Context, id uuid.UUID, req AdminCreateCategoryRequest) (*Category, error)

error 6:
undefined: Category
	AdminUpdateCategory(ctx context.Context, id uuid.UUID, req AdminCreateCategoryRequest) (*Category, error)

error 7:
undefined: AdminCreateSubCategoryRequest
	AdminUpdateSubCategory(ctx context.Context, id uuid.UUID, req AdminCreateSubCategoryRequest) (*SubCategory, error)

error 8:
undefined: SubCategory
	AdminUpdateSubCategory(ctx context.Context, id uuid.UUID, req AdminCreateSubCategoryRequest) (*SubCategory, error)

error 9:
undefined: Category
	GetCategoryByID(ctx context.Context, id uuid.UUID, preloadSubcategories bool) (*Category, error)

error 10:
undefined: Category
	GetCategoryBySlug(ctx context.Context, slug string, preloadSubcategories bool) (*Category, error)

error 11:
undefined: Category
	GetAllCategories(ctx context.Context, preloadSubcategories bool) ([]Category, error)

error 12:
undefined: SubCategory
	GetSubCategoryByID(ctx context.Context, id uuid.UUID) (*SubCategory, error)

error 13:
undefined: Repository
	repo   Repository

error 14:
undefined: Repository
func NewService(repo Repository, logger *zap.Logger, cfg *config.Config) Service {

error 15:
undefined: AdminCreateCategoryRequest
func (s *service) AdminCreateCategory(ctx context.Context, req AdminCreateCategoryRequest) (*Category, error) {

error 16:
undefined: Category
func (s *service) AdminCreateCategory(ctx context.Context, req AdminCreateCategoryRequest) (*Category, error) {

error 17:
undefined: Category
	category := &Category{

error 18:
undefined: AdminCreateSubCategoryRequest
func (s *service) AdminCreateSubCategory(ctx context.Context, categoryID uuid.UUID, req AdminCreateSubCategoryRequest) (*SubCategory, error) {

error 19:
undefined: SubCategory
func (s *service) AdminCreateSubCategory(ctx context.Context, categoryID uuid.UUID, req AdminCreateSubCategoryRequest) (*SubCategory, error) {

error 20:
undefined: SubCategory
	subCategory := &SubCategory{

error 21:
undefined: AdminCreateCategoryRequest
func (s *service) AdminUpdateCategory(ctx context.Context, id uuid.UUID, req AdminCreateCategoryRequest) (*Category, error) {

error 22:
undefined: Category
func (s *service) AdminUpdateCategory(ctx context.Context, id uuid.UUID, req AdminCreateCategoryRequest) (*Category, error) {

error 23:
undefined: AdminCreateSubCategoryRequest
func (s *service) AdminUpdateSubCategory(ctx context.Context, id uuid.UUID, req AdminCreateSubCategoryRequest) (*SubCategory, error) {

error 24:
undefined: SubCategory
func (s *service) AdminUpdateSubCategory(ctx context.Context, id uuid.UUID, req AdminCreateSubCategoryRequest) (*SubCategory, error) {

error 25:
undefined: Category
func (s *service) GetCategoryByID(ctx context.Context, id uuid.UUID, preloadSubcategories bool) (*Category, error) {

error 26:
undefined: Category
func (s *service) GetCategoryBySlug(ctx context.Context, slugToFind string, preloadSubcategories bool) (*Category, error) {

error 27:
undefined: Category
func (s *service) GetAllCategories(ctx context.Context, preloadSubcategories bool) ([]Category, error) {

error 28:
undefined: SubCategory
func (s *service) GetSubCategoryByID(ctx context.Context, id uuid.UUID) (*SubCategory, error) {


./internal/category/handler.go
error 1:
undefined: Service
	service Service // Depends on category.Service

error 2:
undefined: Service
func NewHandler(service Service, logger *zap.Logger) *Handler {

error 3:
undefined: CategoryResponse
	categoryResponses := make([]CategoryResponse, len(categories))

error 4:
undefined: ToCategoryResponse
		categoryResponses[i] = ToCategoryResponse(&cat)

error 5:
undefined: Category
	var catModel *Category // Changed from category to catModel to avoid conflict

error 6:
undefined: ToCategoryResponse
	common.RespondOK(c, "Category retrieved successfully.", ToCategoryResponse(catModel))

error 7:
undefined: AdminCreateCategoryRequest
	var req AdminCreateCategoryRequest

error 8:
undefined: ToCategoryResponse
	common.RespondCreated(c, "Category created successfully.", ToCategoryResponse(catModel))

error 9:
undefined: AdminCreateCategoryRequest
	var req AdminCreateCategoryRequest

error 10:
undefined: ToCategoryResponse
	common.RespondOK(c, "Category updated successfully.", ToCategoryResponse(catModel))

error 11:
undefined: AdminCreateSubCategoryRequest
	var req AdminCreateSubCategoryRequest

error 12:
undefined: ToSubCategoryResponse
	common.RespondCreated(c, "SubCategory created successfully.", ToSubCategoryResponse(subCatModel))

error 13:
undefined: AdminCreateSubCategoryRequest
	var req AdminCreateSubCategoryRequest

error 14:
undefined: ToSubCategoryResponse
	common.RespondOK(c, "SubCategory updated successfully.", ToSubCategoryResponse(subCatModel))


./internal/category/repository.go
error 1:
undefined: Category
	CreateCategory(ctx context.Context, category *Category) error

error 2:
undefined: Category
	FindCategoryByID(ctx context.Context, id uuid.UUID, preloadSubcategories bool) (*Category, error)

error 3:
undefined: Category
	FindCategoryBySlug(ctx context.Context, slug string, preloadSubcategories bool) (*Category, error)

error 4:
undefined: Category
	FindAllCategories(ctx context.Context, preloadSubcategories bool) ([]Category, error)

error 5:
undefined: Category
	UpdateCategory(ctx context.Context, category *Category) error

error 6:
undefined: SubCategory
	CreateSubCategory(ctx context.Context, subCategory *SubCategory) error

error 7:
undefined: SubCategory
	FindSubCategoryByID(ctx context.Context, id uuid.UUID) (*SubCategory, error)

error 8:
undefined: SubCategory
	FindSubCategoriesByCategoryID(ctx context.Context, categoryID uuid.UUID) ([]SubCategory, error)

error 9:
undefined: SubCategory
	UpdateSubCategory(ctx context.Context, subCategory *SubCategory) error

error 10:
undefined: Category
func (r *gormRepository) CreateCategory(ctx context.Context, category *Category) error {

error 11:
undefined: Category
func (r *gormRepository) FindCategoryByID(ctx context.Context, id uuid.UUID, preloadSubcategories bool) (*Category, error) {

error 12:
undefined: Category
	var category Category

error 13:
undefined: Category
func (r *gormRepository) FindCategoryBySlug(ctx context.Context, slug string, preloadSubcategories bool) (*Category, error) {

error 14:
undefined: Category
	var category Category

error 15:
undefined: Category
func (r *gormRepository) FindAllCategories(ctx context.Context, preloadSubcategories bool) ([]Category, error) {

error 16:
undefined: Category
	var categories []Category

error 17:
undefined: Category
func (r *gormRepository) UpdateCategory(ctx context.Context, category *Category) error {

error 18:
undefined: Category
	result := r.db.WithContext(ctx).Select(clause.Associations).Delete(&Category{BaseModel: common.BaseModel{ID: id}})

error 19:
undefined: SubCategory
func (r *gormRepository) CreateSubCategory(ctx context.Context, subCategory *SubCategory) error {

error 20:
undefined: SubCategory
func (r *gormRepository) FindSubCategoryByID(ctx context.Context, id uuid.UUID) (*SubCategory, error) {

error 21:
undefined: SubCategory
	var subCategory SubCategory

error 22:
undefined: SubCategory
func (r *gormRepository) FindSubCategoriesByCategoryID(ctx context.Context, categoryID uuid.UUID) ([]SubCategory, error) {

error 23:
undefined: SubCategory
	var subCategories []SubCategory

error 24:
undefined: SubCategory
func (r *gormRepository) UpdateSubCategory(ctx context.Context, subCategory *SubCategory) error {

error 25:
undefined: SubCategory
	result := r.db.WithContext(ctx).Delete(&SubCategory{BaseModel: common.BaseModel{ID: id}})


./internal/middleware/error.go
error 1:
undefined: RequestIDContextKey
						zap.String("request_id", c.GetString(RequestIDContextKey)), // USE EXPORTED CONSTANT


./internal/common/response.go
error 1:
undefined: IsAPIError
	apiErr, ok := IsAPIError(err) // This function must be defined in common/errors.go

error 2:
undefined: ErrInternalServer
		apiErr = ErrInternalServer.WithDetails(err.Error()) // ErrInternalServer must be defined in common/errors.go

error 3:
undefined: Pagination
	Pagination *Pagination `json:"pagination"` // Pagination must be defined in common/model.go or common/pagination.go

error 4:
undefined: Pagination
func RespondPaginated(c *gin.Context, message string, data interface{}, pagination *Pagination) {


./internal/listing/service.go
error 1:
undefined: CreateListingRequest
	CreateListing(ctx context.Context, userID uuid.UUID, req CreateListingRequest) (*Listing, error)

error 2:
undefined: Listing
	CreateListing(ctx context.Context, userID uuid.UUID, req CreateListingRequest) (*Listing, error)

error 3:
undefined: Listing
	GetListingByID(ctx context.Context, id uuid.UUID, authenticatedUserID *uuid.UUID) (*Listing, error)

error 4:
undefined: UpdateListingRequest
	UpdateListing(ctx context.Context, id uuid.UUID, userID uuid.UUID, req UpdateListingRequest) (*Listing, error)

error 5:
undefined: Listing
	UpdateListing(ctx context.Context, id uuid.UUID, userID uuid.UUID, req UpdateListingRequest) (*Listing, error)

error 6:
undefined: ListingSearchQuery
	SearchListings(ctx context.Context, query ListingSearchQuery, authenticatedUserID *uuid.UUID) ([]Listing, *common.Pagination, error)

error 7:
undefined: Listing
	SearchListings(ctx context.Context, query ListingSearchQuery, authenticatedUserID *uuid.UUID) ([]Listing, *common.Pagination, error)

error 8:
undefined: ListingStatus
	AdminUpdateListingStatus(ctx context.Context, id uuid.UUID, status ListingStatus, adminNotes *string) (*Listing, error)

error 9:
undefined: Listing
	AdminUpdateListingStatus(ctx context.Context, id uuid.UUID, status ListingStatus, adminNotes *string) (*Listing, error)

error 10:
undefined: Listing
	AdminApproveListing(ctx context.Context, id uuid.UUID) (*Listing, error)

error 11:
undefined: Listing
	AdminGetListingByID(ctx context.Context, id uuid.UUID) (*Listing, error) // Bypasses some user checks

error 12:
undefined: Repository
	repo            Repository

error 13:
undefined: Repository
	repo Repository,

error 14:
undefined: CreateListingRequest
func (s *service) CreateListing(ctx context.Context, userID uuid.UUID, req CreateListingRequest) (*Listing, error) {

error 15:
undefined: Listing
func (s *service) CreateListing(ctx context.Context, userID uuid.UUID, req CreateListingRequest) (*Listing, error) {

error 16:
undefined: HousingForRent
		if req.HousingDetails.PropertyType == HousingForRent && (req.HousingDetails.RentDetails == nil || *req.HousingDetails.RentDetails == "") {

error 17:
undefined: HousingForSale
		if req.HousingDetails.PropertyType == HousingForSale && (req.HousingDetails.SalePrice == nil || *req.HousingDetails.SalePrice <= 0) {

error 18:
undefined: StatusActive
	listingStatus := StatusActive

error 19:
undefined: StatusPendingApproval
			listingStatus = StatusPendingApproval

error 20:
undefined: Listing
	newListing := &Listing{

error 21:
undefined: PostGISPoint
		newListing.Location = &PostGISPoint{Lat: *req.Latitude, Lon: *req.Longitude}

error 22:
undefined: ListingDetailsBabysitting
		newListing.BabysittingDetails = &ListingDetailsBabysitting{

error 23:
undefined: ListingDetailsHousing
		newListing.HousingDetails = &ListingDetailsHousing{

error 24:
undefined: ListingDetailsEvents
		newListing.EventDetails = &ListingDetailsEvents{

error 25:
undefined: Listing
func (s *service) GetListingByID(ctx context.Context, id uuid.UUID, authenticatedUserID *uuid.UUID) (*Listing, error) {

error 26:
undefined: StatusPendingApproval
	if listing.Status == StatusPendingApproval {

error 27:
undefined: StatusExpired
	if listing.Status == StatusExpired && (authenticatedUserID == nil || listing.UserID != *authenticatedUserID) {

error 28:
undefined: Listing
func (s *service) AdminGetListingByID(ctx context.Context, id uuid.UUID) (*Listing, error) {

error 29:
undefined: UpdateListingRequest
func (s *service) UpdateListing(ctx context.Context, id uuid.UUID, userID uuid.UUID, req UpdateListingRequest) (*Listing, error) {

error 30:
undefined: Listing
func (s *service) UpdateListing(ctx context.Context, id uuid.UUID, userID uuid.UUID, req UpdateListingRequest) (*Listing, error) {

error 31:
undefined: PostGISPoint
		existingListing.Location = &PostGISPoint{Lat: *existingListing.Latitude, Lon: *existingListing.Longitude}

error 32:
undefined: ListingDetailsBabysitting
					existingListing.BabysittingDetails = &ListingDetailsBabysitting{}

error 33:
undefined: ListingDetailsHousing
					existingListing.HousingDetails = &ListingDetailsHousing{}

error 34:
undefined: ListingDetailsEvents
					existingListing.EventDetails = &ListingDetailsEvents{}

error 35:
undefined: StatusRejected
	if existingListing.Status == StatusRejected || existingListing.Status == StatusAdminRemoved {

error 36:
undefined: StatusAdminRemoved
	if existingListing.Status == StatusRejected || existingListing.Status == StatusAdminRemoved {

error 37:
undefined: ListingSearchQuery
func (s *service) SearchListings(ctx context.Context, query ListingSearchQuery, authenticatedUserID *uuid.UUID) ([]Listing, *common.Pagination, error) {

error 38:
undefined: Listing
func (s *service) SearchListings(ctx context.Context, query ListingSearchQuery, authenticatedUserID *uuid.UUID) ([]Listing, *common.Pagination, error) {

error 39:
undefined: ListingStatus
func (s *service) AdminUpdateListingStatus(ctx context.Context, id uuid.UUID, status ListingStatus, adminNotes *string) (*Listing, error) {

error 40:
undefined: Listing
func (s *service) AdminUpdateListingStatus(ctx context.Context, id uuid.UUID, status ListingStatus, adminNotes *string) (*Listing, error) {

error 41:
undefined: StatusActive
	if status == StatusActive && listing.Status == StatusPendingApproval && !listing.User.IsFirstPostApproved {

error 42:
undefined: StatusPendingApproval
	if status == StatusActive && listing.Status == StatusPendingApproval && !listing.User.IsFirstPostApproved {

error 43:
undefined: Listing
func (s *service) AdminApproveListing(ctx context.Context, id uuid.UUID) (*Listing, error) {

error 44:
undefined: StatusActive
	return s.AdminUpdateListingStatus(ctx, id, StatusActive, nil)

error 45:
undefined: StatusExpired
		listing.Status = StatusExpired

error 46:
undefined: StatusExpired
		if err := s.repo.UpdateStatus(ctx, listing.ID, StatusExpired, nil); err != nil {


./internal/listing/handler.go
error 1:
undefined: Service
	service Service

error 2:
undefined: Service
func NewHandler(service Service, logger *zap.Logger) *Handler { // NEW

error 3:
undefined: CreateListingRequest
	var req CreateListingRequest

error 4:
undefined: ToListingResponse
	common.RespondCreated(c, "Listing created successfully.", ToListingResponse(listing, true))

error 5:
undefined: ToListingResponse
	common.RespondOK(c, "Listing retrieved successfully.", ToListingResponse(listing, isAuthenticatedForContact))

error 6:
undefined: ListingSearchQuery
	var query ListingSearchQuery

error 7:
undefined: ListingResponse
	listingResponses := make([]ListingResponse, len(listings))

error 8:
undefined: ToListingResponse
		listingResponses[i] = ToListingResponse(&l, isAuthenticatedForContact)

error 9:
undefined: UpdateListingRequest
	var req UpdateListingRequest

error 10:
undefined: ToListingResponse
	common.RespondOK(c, "Listing updated successfully.", ToListingResponse(listing, true))

error 11:
undefined: ToListingResponse
	common.RespondOK(c, "Admin: Listing retrieved successfully.", ToListingResponse(listing, true))

error 12:
undefined: AdminUpdateListingStatusRequest
	var req AdminUpdateListingStatusRequest

error 13:
undefined: ToListingResponse
	common.RespondOK(c, "Admin: Listing status updated successfully.", ToListingResponse(listing, true))

error 14:
undefined: ToListingResponse
	common.RespondOK(c, "Admin: Listing approved successfully.", ToListingResponse(listing, true))


./internal/listing/repository.go
error 1:
undefined: Listing
	Create(ctx context.Context, listing *Listing) error

error 2:
undefined: Listing
	FindByID(ctx context.Context, id uuid.UUID, preloadAssociations bool) (*Listing, error)

error 3:
undefined: Listing
	Update(ctx context.Context, listing *Listing) error

error 4:
undefined: ListingSearchQuery
	Search(ctx context.Context, query ListingSearchQuery) ([]Listing, *common.Pagination, error)

error 5:
undefined: Listing
	Search(ctx context.Context, query ListingSearchQuery) ([]Listing, *common.Pagination, error)

error 6:
undefined: ListingStatus
	UpdateStatus(ctx context.Context, id uuid.UUID, status ListingStatus, adminNotes *string) error

error 7:
undefined: Listing
	FindExpiredListings(ctx context.Context, now time.Time) ([]Listing, error)

error 8:
undefined: ListingStatus
	CountListingsByUserIDAndStatus(ctx context.Context, userID uuid.UUID, status ListingStatus) (int64, error)

error 9:
undefined: Listing
func (r *gormRepository) Create(ctx context.Context, listing *Listing) error {

error 10:
undefined: Listing
func (r *gormRepository) FindByID(ctx context.Context, id uuid.UUID, preloadAssociations bool) (*Listing, error) {

error 11:
undefined: Listing
	var listing Listing

error 12:
undefined: Listing
func (r *gormRepository) Update(ctx context.Context, listing *Listing) error {

error 13:
undefined: ListingDetailsBabysitting
				DoUpdates: clause.AssignmentColumns(getUpdatableColumns(ListingDetailsBabysitting{})),

error 14:
undefined: ListingDetailsBabysitting
			tx.Where("listing_id = ?", listing.ID).Delete(&ListingDetailsBabysitting{})

error 15:
undefined: ListingDetailsHousing
				DoUpdates: clause.AssignmentColumns(getUpdatableColumns(ListingDetailsHousing{})),

error 16:
undefined: ListingDetailsHousing
			tx.Where("listing_id = ?", listing.ID).Delete(&ListingDetailsHousing{})

error 17:
undefined: ListingDetailsEvents
				DoUpdates: clause.AssignmentColumns(getUpdatableColumns(ListingDetailsEvents{})),

error 18:
undefined: ListingDetailsEvents
			tx.Where("listing_id = ?", listing.ID).Delete(&ListingDetailsEvents{})

error 19:
undefined: ListingDetailsBabysitting
	case ListingDetailsBabysitting:

error 20:
undefined: ListingDetailsHousing
	case ListingDetailsHousing:

error 21:
undefined: ListingDetailsEvents
	case ListingDetailsEvents:

error 22:
undefined: Listing
	var listing Listing

error 23:
undefined: Listing
	result := r.db.WithContext(ctx).Select(clause.Associations).Delete(&Listing{BaseModel: common.BaseModel{ID: id}})

error 24:
undefined: ListingSearchQuery
func (r *gormRepository) Search(ctx context.Context, queryParams ListingSearchQuery) ([]Listing, *common.Pagination, error) {

error 25:
undefined: Listing
func (r *gormRepository) Search(ctx context.Context, queryParams ListingSearchQuery) ([]Listing, *common.Pagination, error) {

error 26:
undefined: Listing
	var listings []Listing

error 27:
undefined: Listing
	dbQuery := r.db.WithContext(ctx).Model(&Listing{})

error 28:
undefined: ListingStatus
		dbQuery = dbQuery.Where("listings.status IN (?)", []ListingStatus{StatusActive, StatusPendingApproval})

error 29:
undefined: StatusActive
		dbQuery = dbQuery.Where("listings.status IN (?)", []ListingStatus{StatusActive, StatusPendingApproval})

error 30:
undefined: StatusPendingApproval
		dbQuery = dbQuery.Where("listings.status IN (?)", []ListingStatus{StatusActive, StatusPendingApproval})

error 31:
undefined: ListingStatus
func (r *gormRepository) UpdateStatus(ctx context.Context, id uuid.UUID, status ListingStatus, adminNotes *string) error {

error 32:
undefined: Listing
	result := r.db.WithContext(ctx).Model(&Listing{}).Where("id = ?", id).Updates(updates)

error 33:
undefined: Listing
func (r *gormRepository) FindExpiredListings(ctx context.Context, now time.Time) ([]Listing, error) {

error 34:
undefined: Listing
	var listings []Listing

error 35:
undefined: StatusExpired
		Where("expires_at <= ? AND status != ?", now, StatusExpired).

error 36:
undefined: ListingStatus
func (r *gormRepository) CountListingsByUserIDAndStatus(ctx context.Context, userID uuid.UUID, status ListingStatus) (int64, error) {

error 37:
undefined: Listing
	err := r.db.WithContext(ctx).Model(&Listing{}).Where("user_id = ? AND status = ?", userID, status).Count(&count).Error

error 38:
undefined: Listing
	err := r.db.WithContext(ctx).Model(&Listing{}).Where("user_id = ?", userID).Count(&count).Error


./internal/shared/user_service.go
error 1:
undefined: User
func (u *User) GetID() uuid.UUID {

error 2:
undefined: User
func (u *User) GetEmail() *string {

error 3:
undefined: User
func (u *User) GetRole() string {


