package notification

import (
	"context"
	// "fmt" // Removed as not directly used, errors are handled via common.APIError or zap
	"seattle_info_backend/internal/common"
	"time" // For CreatedAt

	"github.com/google/uuid"
	"go.uber.org/zap"
)

type Service interface {
	CreateNotification(ctx context.Context, userID uuid.UUID, notificationType NotificationType, message string, relatedListingID *uuid.UUID) (*Notification, error)
	GetNotificationsForUser(ctx context.Context, userID uuid.UUID, page, pageSize int) ([]Notification, *common.Pagination, error)
	MarkNotificationAsRead(ctx context.Context, notificationID uuid.UUID, userID uuid.UUID) error
	MarkAllUserNotificationsAsRead(ctx context.Context, userID uuid.UUID) (int64, error)
}

// ServiceImplementation implements the notification Service interface.
type ServiceImplementation struct {
	repo   Repository
	logger *zap.Logger
}

// NewService creates a new notification service.
func NewService(repo Repository, logger *zap.Logger) Service {
	return &ServiceImplementation{repo: repo, logger: logger}
}

// CreateNotification creates a new notification.
func (s *ServiceImplementation) CreateNotification(ctx context.Context, userID uuid.UUID, notificationType NotificationType, message string, relatedListingID *uuid.UUID) (*Notification, error) {
	notification := &Notification{
		// ID will be generated by GORM default uuid_generate_v4()
		UserID:             userID,
		Type:               notificationType,
		Message:            message,
		RelatedListingID:   relatedListingID,
		IsRead:             false,
		CreatedAt:          time.Now().UTC(), // Explicitly set to UTC, though DB default CURRENT_TIMESTAMP should handle timezone
	}

	if err := s.repo.Create(ctx, notification); err != nil {
		s.logger.Error("Failed to create notification in service", zap.Error(err), zap.String("userID", userID.String()), zap.String("type", string(notificationType)))
		return nil, common.ErrInternalServer.WithDetails("Could not create notification.")
	}
	s.logger.Info("Notification created successfully",
		zap.String("notificationID", notification.ID.String()),
		zap.String("userID", userID.String()),
		zap.String("type", string(notificationType)))
	return notification, nil
}

// GetNotificationsForUser retrieves paginated notifications for a user.
func (s *ServiceImplementation) GetNotificationsForUser(ctx context.Context, userID uuid.UUID, page, pageSize int) ([]Notification, *common.Pagination, error) {
	notifications, pagination, err := s.repo.GetByUserID(ctx, userID, page, pageSize)
	if err != nil {
		s.logger.Error("Failed to get notifications for user from repo", zap.Error(err), zap.String("userID", userID.String()))
		if _, ok := err.(*common.APIError); ok {
			return nil, nil, err
		}
		return nil, nil, common.ErrInternalServer.WithDetails("Could not retrieve notifications.")
	}
	return notifications, pagination, nil
}

// MarkNotificationAsRead marks a specific notification as read.
func (s *ServiceImplementation) MarkNotificationAsRead(ctx context.Context, notificationID uuid.UUID, userID uuid.UUID) error {
	err := s.repo.MarkAsRead(ctx, notificationID, userID)
	if err != nil {
		s.logger.Warn("Failed to mark notification as read in repo",
			zap.Error(err),
			zap.String("notificationID", notificationID.String()),
			zap.String("userID", userID.String()))

		if apiErr, ok := err.(*common.APIError); ok {
			return apiErr
		}
		return common.ErrInternalServer.WithDetails("Could not mark notification as read.")
	}
	s.logger.Info("Notification marked as read", zap.String("notificationID", notificationID.String()), zap.String("userID", userID.String()))
	return nil
}

// MarkAllUserNotificationsAsRead marks all of a user's notifications as read.
func (s *ServiceImplementation) MarkAllUserNotificationsAsRead(ctx context.Context, userID uuid.UUID) (int64, error) {
	count, err := s.repo.MarkAllAsRead(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to mark all notifications as read in repo", zap.Error(err), zap.String("userID", userID.String()))
		return 0, common.ErrInternalServer.WithDetails("Could not mark all notifications as read.")
	}
	s.logger.Info("All unread notifications marked as read for user", zap.Int64("count", count), zap.String("userID", userID.String()))
	return count, nil
}
